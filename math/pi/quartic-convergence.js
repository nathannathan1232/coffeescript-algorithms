// Generated by CoffeeScript 1.12.3

/*
 * This file contains the quadratically converging version of the Borwein algorithm
 * 
 * Each iteration quadrupels the number of correct digits
 * This function returns more digits than it should. To ensure a perfectly accurate
 * number, use a high amount of iterations.
 */

(function() {
  var math, quadraticPi;

  math = require('mathjs');

  math.config({
    number: 'BigNumber',
    precision: 1000
  });

  quadraticPi = function(n) {
    var a, i, j, ref, y;
    a = math["eval"]('2(sqrt(2) - 1)^2');
    y = math["eval"]('sqrt(2) - 1');
    for (i = j = 0, ref = n; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      y = math["eval"]("(1 - (1 - (" + y + ")^4)^.25) / (1 + (1 - (" + y + ")^4)^.25)");
      a = math["eval"](a + "(1 + " + y + ")^4 - 2^(2 * " + i + " + 3) * " + y + "(1 + " + y + " + (" + y + ")^2)");
    }
    return math["eval"]("1 / " + a);
  };

  if (typeof module === 'object' && module.exports) {
    module.exports = quadraticPi;
  } else if (window) {
    window.quadraticPi = quadraticPi;
  } else if (typeof define === 'function' && define.amd) {
    define([], function() {
      return quadraticPi;
    });
  }

}).call(this);
